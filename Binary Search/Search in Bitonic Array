Problem Description
 
 

Given a bitonic sequence A of N distinct elements, write a program to find a given element B in the bitonic sequence in O(logN) time.

NOTE:

A Bitonic Sequence is a sequence of numbers which is first strictly increasing then after a point strictly decreasing.


Problem Constraints
3 <= N <= 105

1 <= A[i], B <= 108

Given array always contain a bitonic point.

Array A always contain distinct elements.



Input Format
First argument is an integer array A denoting the bitonic sequence.

Second argument is an integer B.



Output Format
Return a single integer denoting the position (0 index based) of the element B in the array A if B doesn't exist in A return -1.



Example Input
Input 1:

 A = [3, 9, 10, 20, 17, 5, 1]
 B = 20
Input 2:

 A = [5, 6, 7, 8, 9, 10, 3, 2, 1]
 B = 30


Example Output
Output 1:

 3
Output 2:

 -1


Example Explanation
Explanation 1:

 B = 20 present in A at index 3
Explanation 2:

 B = 30 is not present in A

<_______________________________________________________________________________>

SOLUTION:


public class Solution {
    int findPeakElement(int[] nums, int low, int high) {
    if (low == high)
        return low;
    int mid = (low + high) / 2;
    if (nums[mid] > nums[mid + 1])
        return findPeakElement(nums, low, mid);
    return findPeakElement(nums, mid + 1, high);
}

int ascendingBinarySearch(int arr[], int low, int high, int key) {
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key)
            return mid;
        if (arr[mid] > key)
            high = mid - 1;
        else
            low = mid + 1;
    }
    return -1;
}
// Function for binary search in descending part of array
int descendingBinarySearch(int arr[], int low, int high, int key) {
    while (low <= high) {
        int mid = low + (high - low) / 2 ;
        if (arr[mid] == key)
            return mid ;
        if (arr[mid] < key)
            high = mid - 1; 
        else 
            low = mid + 1 ;
    }
    return -1 ;
}
    public int solve(int[] nums, int k) {
       int size=nums.length;
      int peak_index = findPeakElement(nums, 0, size-1);
    if(k > nums[peak_index]) 
        return -1;
    else if(k == nums[peak_index]) 
        return peak_index ;
    else {
       int  temp = ascendingBinarySearch(nums, 0, peak_index-1, k) ;
        if (temp != -1) { 
            return temp ;
        }
        // Search in right of k 
        temp = descendingBinarySearch(nums, peak_index+1, size-1, k);
        if(temp != -1){
            return temp;
        }
    }
    return -1; 
    }
}
